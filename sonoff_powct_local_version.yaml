# Basic Config
# Pin	Function
# GPIO00	Push Button (HIGH = off, LOW = on)
# GPIO05	TM1621 DA
# GPIO13	Status LED (HIGH = off, LOW = on)
# GPIO15	Wifi_LED
# GPIO17	TM1621 CS
# GPIO18	TM1621 WR
# GPIO21	Relay1
# GPIO23	TM1621 RD
# GPIO25	CSE7761 Rx
# GPIO26	CSE7761 Tx
esphome:
  name: my-sonoff-powct
  friendly_name: my Sonoff POWCT

esp32:
  board: nodemcu-32s

logger:
   level: INFO

api:
  encryption:
    key: ">>>>>>>>PUT HERE YOUR OWN KEY<<<<<<<<<<<"
  reboot_timeout: 5min # Attendre 5 minutes avant de redémarrer si l'API est perdue
  
#   custom_services: True
  services:
    - service: read_register
      variables:
        # Correspond aux arguments de la fonction C++: read_register_service(int register_number, int size)
        register_number: string
        size: int
      then:
        # L'action LAMBDA qui appelle la fonction C++ sur l'instance de composant.
        # L'ID du composant est 'cse7761_comp'
        - lambda: |-
            id(cse7761_comp).read_register_service(register_number, size);

ota:
  - platform: esphome
    password: ">>>>>>>>PUT HERE YOUR OWN PASSWORD<<<<<<<<<<<"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ">>>>>>>>PUT HERE YOUR OWN FALLBACK SSID<<<<<<<<<<<"
    password: ">>>>>>>>PUT HERE YOUR OWN PASSWORD<<<<<<<<<<<"

web_server:
  ota: false # OTA in captive portal
  log: false # no log on web page
  local: true # all page libs in component
  version: 3

captive_portal:

time:
  - platform: homeassistant
    id: homeassistant_time

external_components:
  - source: my_components # local personnal component directory
    components: [cse7761] # components to be taken locally

uart:
  tx_pin: GPIO26
  rx_pin: GPIO25
  baud_rate: 38400
  parity: EVEN
  stop_bits: 1

# Déclaration du text_sensor en premier pour être certain que l'ID existe
text_sensor:
  - platform: template
    id: lecture_registre_debug
    name: "CSE7761 Lecture Registre"
    entity_category: diagnostic
    # Le Text Sensor peut être mis en mode interne si vous ne voulez pas le voir dans l'interface par défaut
#    internal: true 
    
# my cse7761 component version
sensor:
  # AJOUT D'UN ID EXPLICITE POUR LE COMPOSANT PRINCIPAL
  - platform: cse7761
    id: cse7761_comp # ID explicite pour l'instance du composant
    update_interval: 2s
    debug_sensor_id: lecture_registre_debug
    current_1:
      name: Current
      id: a_sensor
      unit_of_measurement: 'A'
      accuracy_decimals: 3
      icon: mdi:current-ac
      filters:
        # Measurement divided by the PI number
        - lambda: return x / PI;
    voltage:
      name: Voltage
      id: v_sensor
      unit_of_measurement: 'V'
      icon: mdi:sine-wave
    active_power_1:
      name: Power
      id: w_sensor
      filters:
        # Measurement divided by the PI number
        - lambda: return x / PI;
      icon: mdi:flash
      on_value_range:
        - above: 4.0
          then:
            - light.turn_on: switch_led
        - below: 3.0
          then:
            - light.turn_off: switch_led

  - platform: total_daily_energy
    name: Total Daily Energy
    power_id: w_sensor
    id: kw_sensor
    unit_of_measurement: 'kWh'
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    icon: mdi:lightning-bolt
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001

  - platform: template
    name: ESP32 Internal Temp
    device_class: temperature
    unit_of_measurement: °C
    id: esp32_temp
    icon: mdi:thermometer
    lambda: return temperatureRead();

  - platform: template
    name: Power Factor
    device_class: power_factor
    id: power_factor
    icon: mdi:angle-acute
    lambda: return id(w_sensor).state / id(v_sensor).state / id(a_sensor).state;

binary_sensor:
  - platform: gpio
    pin: GPIO00
    id: reset
    internal: true
    filters:
      - invert:
      - delayed_off: 10ms
    on_click:
      - max_length: 350ms # short press to toggle the relay
        then:
          switch.toggle: relay_1
      - min_length: 360ms # long press to cycle display info
        max_length: 3s
        then:
          - if:
              condition:
                binary_sensor.is_on: page
              then:
                binary_sensor.template.publish:
                  id: page
                  state: OFF
              else:
                binary_sensor.template.publish:
                  id: page
                  state: ON
  - platform: template # this is a fake sensor to tell the screen which info to show on display
    id: page
    publish_initial_state: true
    internal: true

display:
  platform: tm1621
  id: tm1621_display
  cs_pin: GPIO17
  data_pin: GPIO05
  read_pin: GPIO23
  write_pin: GPIO18
  lambda: |-
    if (id(page).state) {
      it.display_voltage(true);
      it.display_kwh(false);
      it.printf(0, "%.1f", id(v_sensor).state);
      it.printf(1, "%.1f", id(a_sensor).state);
    } else {  
      it.display_voltage(false);
      it.display_kwh(true);
      it.printf(0, "%.1f", id(kw_sensor).state);
      it.printf(1, "%.1f", id(w_sensor).state);
    }

output:
  - platform: ledc
    id: led
    pin:
      number: GPIO13
      inverted: False

switch:
  - platform: gpio
    name: Relay
    pin: GPIO21
    id: relay_1
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - delay: 500ms
      - light.turn_on: switch_led
    on_turn_off:
      - delay: 500ms
      - light.turn_off: switch_led

light:
  - platform: monochromatic
    id: switch_led
    output: led
    internal: True
  - platform: status_led
    id: wifi_status_led
    internal: True
    pin:
      number: GPIO15
      inverted: True

